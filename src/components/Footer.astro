---
import { supabase } from "../lib/supabase";
import Icon from "./Icon.astro";

const { count } = await supabase
  .from("covers")
  .select("*", { count: "estimated", head: true });
---

<footer transition:animate="fade">
  <nav>
    {
      count && (
        <span class="count">
          <strong>{`${count} covers`}</strong> and counting
        </span>
      )
    }
    <span class="credits">
      A project by <a href="https://evadecker.com">Eva Decker</a>
    </span>
    <div class="links">
      <a href="/about">About</a>
      <a href="https://github.com/evadecker/genderswap.fm">GitHub</a>
    </div>
  </nav>
  <div class="toggle">
    <button
      type="button"
      data-theme-toggle-light
      aria-label="Enable light theme"
    >
      <Icon icon="sun" size="small" />
    </button>
    <button type="button" data-theme-toggle-dark aria-label="Enable dark theme">
      <Icon icon="moon" size="small" />
    </button>
  </div>
</footer>

<script>
  const setTheme = (theme: "light" | "dark") => {
    const inactiveTheme = theme === "light" ? "dark" : "light";
    document.body.classList.remove(inactiveTheme);
    document.body.classList.add(theme);

    const metaTheme = document.querySelector('meta[name="theme-color"]');
    if (metaTheme !== null)
      metaTheme.setAttribute(
        "content",
        theme === "dark" ? "#121113" : "#FDFCFD"
      );

    window.localStorage.setItem("theme", theme);

    const lightToggle = document.querySelector("[data-theme-toggle-light]");
    const darkToggle = document.querySelector("[data-theme-toggle-dark]");

    if (theme === "light") {
      lightToggle?.classList.add("active");
      darkToggle?.classList.remove("active");
    } else {
      lightToggle?.classList.remove("active");
      darkToggle?.classList.add("active");
    }
  };

  const toggleTheme = () => {
    // Local storage will have been set in preloadTheme.js
    const activeTheme = window.localStorage.getItem("theme");

    // Runs on initial page load
    setTheme(activeTheme as "light" | "dark");

    const lightToggle = document.querySelector("[data-theme-toggle-light]");
    lightToggle?.addEventListener("click", () => setTheme("light"));

    const darkToggle = document.querySelector("[data-theme-toggle-dark]");
    darkToggle?.addEventListener("click", () => setTheme("dark"));
  };

  // Runs on view transition navigation
  document.addEventListener("astro:after-swap", toggleTheme);
</script>

<style lang="scss">
  footer {
    width: 100%;
    padding: var(--space-xl);
    display: flex;
    align-items: center;
    justify-content: space-between;
    z-index: 0;

    a {
      font-weight: var(--font-weight-bold);
      text-decoration: underline;
      text-decoration-color: var(--mauve-7);
      text-underline-offset: 0.15em;
      white-space: nowrap;

      @media (hover: hover) and (pointer: fine) {
        &:hover {
          text-decoration-color: inherit;
        }
      }
    }
  }

  nav,
  .links {
    font-size: var(--step--1);
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-s);
  }

  .credits {
    white-space: nowrap;
  }

  .divider {
    margin-inline: var(--space-s);
    font-weight: var(--font-weight-bold);
    color: var(--mauve-10);
  }

  .toggle {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.2em;
    margin-inline-start: 0.5em;
    border-radius: var(--radius-full);
    line-height: 0;

    button {
      all: unset;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      border-radius: var(--radius-full);
      color: var(--mauve-10);
      cursor: pointer;

      &[data-theme-toggle-light].active,
      &[data-theme-toggle-light]:hover {
        background: var(--orange-3);
        color: var(--orange-11);
      }

      &[data-theme-toggle-dark].active,
      &[data-theme-toggle-dark]:hover {
        background: var(--violet-3);
        color: var(--violet-11);
      }
    }
  }
</style>
