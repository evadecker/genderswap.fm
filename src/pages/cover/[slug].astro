---
import BaseLayout from "../../layouts/BaseLayout.astro";
import PageHeader from "../../components/PageHeader.astro";
import CoverComparison from "../../components/CoverComparison.astro";
import { supabase } from "../../lib/supabase";
import dayjs from "dayjs";
import { getReadableTitle } from "../../helpers/helpers";
import type { Enums, Tables } from "../../types/types";
import TagCloud from "../../components/TagCloud.astro";
import Tag from "../../components/Tag.astro";
import { TAGS } from "../../types/tags";

const { slug } = Astro.params;

// We have to redefine this type because Supabase is inferring it incorrectly
export type Cover = {
  original: Tables<"songs">;
  cover: Tables<"songs">;
  created_at: string;
  description: string;
  contributor: string;
  tags: Enums<"tags">[];
};

const { data } = await supabase
  .from("covers")
  .select(
    `
    original:original_id(id, name, url, artists, gender, album_name, album_img, album_year, energy, key, tempo, danceability, valence, time_signature),
    cover:cover_id(id, name, url, artists, gender, album_name, album_img, album_year, energy, key, tempo, danceability, valence, time_signature),
    created_at,
    description,
    contributor,
    tags
  `
  )
  .eq("slug", slug!!)
  .returns<Cover>()
  .single();

if (!data) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const { original, cover, created_at, description, contributor, tags } =
  data as Cover;

const title =
  original && cover
    ? getReadableTitle({
        originalName: original.name,
        originalArtists: original.artists,
        coverArtists: cover.artists,
      })
    : "Loading...";

const formattedDate = dayjs(created_at).format("MMMM D, YYYY");
---

<BaseLayout title={title} description={description!!}>
  <PageHeader title={original.name} description={description}>
    <TagCloud>
      {
        tags.map((tag) => (
          <Tag text={TAGS[tag].label} url={`/tagged/${TAGS[tag].slug}`} />
        ))
      }
    </TagCloud>
  </PageHeader>
  <CoverComparison cover={data} />
  <footer class="footer">
    <span
      >Added {contributor && `by ${contributor} on `}
      <time datetime={created_at}>{formattedDate}</time></span
    >
  </footer>
</BaseLayout>

<style>
  .footer {
    padding-block: var(--space-2xl);
    display: flex;
    flex-direction: column;
    align-items: center;
  }
</style>
